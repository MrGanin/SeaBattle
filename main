import random


class Dot:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def input_cell(self):
        while True:
            try:
                self.x = int(input('Введите координату x\t'))
                self.y = int(input('Введите координату y\t'))
                if (0 >= self.x or self.x >= 7) or (0 >= self.y or self.y >= 7):
                    print('Вы ввели некороктные координаты')
                    continue
                else:
                    break
            except ValueError:
                print('Необходимо вводить число')
                continue
        return [self.x, self.y]

    def input_pos(self):
        while True:
            try:
                position = str(input('Введите положение коробля вертикальное (V), горизонтальное (H):\t'))

                if position.upper() != 'H' and position.upper() != 'V':
                    print('Вы ввели некоротные данные позиции, попробуйте еще раз!')
                    continue
                else:
                    break
            except ValueError:
                print('Необходимо вводить букву')
                continue
        return position

    @property
    def get_dot(self):
        return [self.x, self.y]

    def set_dot(self, x, y):
        if (0 >= x or x >= 7) or (0 >= y or y >= 7):
            return 'Введены некороктные координаты'
        else:
            self.x = x
            self.y = y
            return [self.x, self.y]


class Ship:
    def __init__(self, long=0, coord=(), position="", hp=0):
        self.long = long
        self.coord = list(coord)
        self.position = position
        self.hp = hp

    @property
    def dots(self):
        long = self.long
        list_dots = []
        shipparam = []
        for i in range(self.long):
            long = long - 1
            if self.position == 'V':
                list_dots.append([self.coord[0], self.coord[1] + long])
            else:
                list_dots.append([self.coord[0] - long, self.coord[1]])

        shipparam.append(self.long), shipparam.append(list_dots), shipparam.append(self.position), shipparam.append(
            self.hp)
        return shipparam


class ErrorSetupShip(Exception):
    pass


class MissShot(ErrorSetupShip):
    pass


class Board(Dot):
    def __init__(self):
        self.list_board = [['O'] * 6 for i in range(6)]
        self.list_ship = []
        self.list_shots = []
        self.live_ship = 7
    def setupcheck(self, dots):
        for d in dots:
            y = d[1] - 1
            x = d[0] - 1
            if self.list_board[y][x] == 'O':
                return True
            else:
                return False

    def ship_add(self, ship):
        p = ship[2]
        cell = ship[1]
        long = ship[0]
        try:
            if self.out(cell) == False or self.setupcheck(cell) == False or \
                    self.checkcont(self.contour(long, cell[-1], p)) == False:
                raise ErrorSetupShip

        except ErrorSetupShip:
            return False

        else:
            return True

    # Функция которая описывает вокруг подбитого коробля
    def contour(self, long, coord, position):
        x = coord[0]
        y = coord[1]
        combinations = [[x, y - 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1], [x - 1, y + 1], [x - 1, y],
                        [x - 1, y - 1], [x, y + 1]]

        for i in range(1):
            if position == 'V':

                for j in range(2, long + 1):
                    combinations.append([x - 1, y + j])
                    combinations.append([x + 1, y + j])

                combinations.remove([x, y + 1])
                combinations.append([x, y + long])
                return combinations
            elif position == 'H':
                for j in range(2, long + 1):
                    combinations.append([x - j, y - 1])
                    combinations.append([x - j, y + 1])

                combinations.remove([x - 1, y])
                combinations.append([x - long, y])
                return combinations

            else:
                return combinations

    def checkcont(self, combinations):
        try:
            for combo in combinations:  # Проверка координат после вычислений на то, чтобы они входили в нужный диапозон
                if (0 >= combo[0] or combo[0] >= 7) or (0 >= combo[1] or combo[1] >= 7):
                    continue
                else:
                    if self.list_board[combo[1] - 1][combo[0] - 1] == '■':
                        raise IndexError

        except IndexError:
            return False

    def draw_board(self):
        _str = '  1|2|3|4|5|6|'
        for draw, num in zip(self.list_board, range(1, 7)):
            _str += '\n' + str(num) + '|'
            for _draw in draw:
                _str += _draw + '|'
        return _str

    def out(self, dot):
        try:
            for c in dot:
                if (0 >= c[0] or c[0] >= 7) or (0 >= c[1] or c[1] >= 7):
                    raise IndexError
                else:
                    return True

        except IndexError:
            return False

    # Функция выстрела
    def shot(self, dots, check):
        try:
            y = dots[1] - 1
            x = dots[0] - 1
            if check.list_board[y][x] == 'O':
                raise MissShot
        except MissShot:
            return False

        else:
            return True


class Player:
    def __init__(self):
        self.board = Board()



    def ask_ship(self):
        raise NotImplementedError


class AI(Player):
    def ask_ship(self, long):
        count = 0

        while True:
            if count == 100:
                return False
            else:
                x = random.randint(1, 6)
                y = random.randint(1, 6)
                cell = [x, y]
                position = random.choice(['V', 'H'])
                long = long
                self.ship = Ship(long, cell, position, long)
                try:
                    if self.board.ship_add(self.ship.dots) == False:
                        raise ErrorSetupShip

                except ErrorSetupShip:
                    count += 1
                    continue
                else:

                    return True

    def ask_shot(self, checklist, drawlist):
        while True:
            if checklist.live_ship == 0:
                break
            elif self.board.live_ship == 0:
                break
            else:
                x = random.randint(1, 6)
                y = random.randint(1, 6)
                cell = [x, y]
            if cell in self.board.list_shots:
                continue
            else:
                if self.board.shot(cell, checklist) == True:
                    self.board.list_shots.append(cell)
                    drawlist.list_board[cell[1] - 1][cell[0] - 1] = 'X'
                    for ch in checklist.list_ship:
                        if cell in ch[1]:
                            ch[3] -= 1
                            if ch[3] == 0:
                                drawlist.live_ship -= 1
                                print('Ваш корабль потоплен!')
                                print('Противник делает еще один выстрел!')
                                for drawcont in self.board.contour(ch[0], ch[1][-1], ch[2]):
                                    if (0 >= drawcont[0] or drawcont[0] >= 7) or (0 >= drawcont[1] or drawcont[1] >= 7):
                                        continue
                                    else:
                                        drawlist.list_board[drawcont[1] - 1][drawcont[0] - 1] = 'T'
                                        self.board.list_shots.append(drawcont)
                                continue
                            else:
                                print('Ваш корабль подбит!')
                                print('Противник делает еще один выстрел!')
                                continue

                else:
                    drawlist.list_board[cell[1] - 1][cell[0] - 1] = 'T'
                    self.board.list_shots.append(cell)
                    print('Ваш противник промахнулся!')
                    break


class Human(Player):
    def ask_ship(self, long):
        count = 0
        while True:
            if count == 100:
                return False
            else:
                print(self.board.draw_board())
                cell = self.board.input_cell()
                position = 'one' if long == 1 else self.board.input_pos()
                long = long
                self.ship = Ship(long, cell, position, long)
                try:
                    if self.board.ship_add(self.ship.dots) == False:
                        print('Установить корабль нельзя')
                        raise ErrorSetupShip

                except ErrorSetupShip:
                    count += 1
                    continue
                else:
                    return True

    def ask_shot(self, checklist, drawlist):
        while True:
            print('Поле ваших кораблей')
            print(self.board.draw_board())
            print('\n'*2)
            print('Поле выстрелов по противнику')
            print(drawlist.draw_board())
            if checklist.live_ship == 0:
                break
            elif self.board.live_ship == 0:
                break
            else:
                cell = self.board.input_cell()

            if cell in self.board.list_shots:
                print('По данным координатам был произведен выстрел или рядом потоплен корабль, введите другие!')
                continue

            else:

                if self.board.shot(cell, checklist) == True:
                    self.board.list_shots.append(cell)
                    drawlist.list_board[cell[1] - 1][cell[0] - 1] = 'X'

                    for ch in checklist.list_ship:
                        if cell in ch[1]:
                            ch[3] -= 1
                            if ch[3] == 0:
                                checklist.live_ship -= 1
                                print('Корабль потоплен!')
                                print('Стреляйте еще!' if checklist.live_ship != 0 else '')

                                for drawcont in self.board.contour(ch[0], ch[1][-1], ch[2]):
                                    if (0 >= drawcont[0] or drawcont[0] >= 7) or (0 >= drawcont[1] or drawcont[1] >= 7):
                                        continue
                                    else:
                                        drawlist.list_board[drawcont[1] - 1][drawcont[0] - 1] = 'T'
                                        self.board.list_shots.append(drawcont)
                                continue
                            else:
                                print('Корабль подбит!')
                                print('Стреляйте еще!')
                                continue

                else:
                    drawlist.list_board[cell[1] - 1][cell[0] - 1] = 'T'
                    self.board.list_shots.append(cell)
                    print('Промах, повезет в следущий раз!')
                    break

class Game(Board):
    def __init__(self):
        self.human = Human()
        self.ai = AI()
        self.humanmarks = Human()
        self.aimarks = AI()

    def rules(self):
        print('''Рады приветствовать Вас в игре морской бой!!!
                 ---------------------------------------------
                           П Р А В И Л А   И Г Р Ы
                 ---------------------------------------------
                  Суть игры заключается в уничтожение всех ко-
                 раблей противника на поле боя. На более есть
                 один трехпалубный корабль, два двухпалубных и
                 четыри однопалубных корабля. Корабли отмечены
                 квадратом "■", одна палуба, один квадрат. При
                 попадание снаряда в корабль он помечается "Х"
                 крестиком, в случае неудачного выстрела клет-
                 ка на поле будет помечена букво "T". Корабли
                 3-х и 2-х палуб следует расставлять по верти-
                 кали и горизонтали, при этом указывается все-
                 го одна координата. Корабль ставиться от точ-
                 ки координаты при горизонтальном положении от
                 точки влево, по вертикали от точки вниз. 
                 Пример: если указана координата x - 3 y - 1,
                 положение горизонтальное, палуб 3. Тогда ко-
                 рабль выстроиться по координатам (x,y)- (3,1);
                 (2,1); (1,1). Если вертикальное положение, 2х
                 палубный корабль, тогда (3,1); (3,2). В случае
                 уничтожение корабля, корабль помечается по 
                 контору буквой "T".


        ''')
    def fill_board(self, player):
        count = 0
        while count < 3:

            s = [1,2,4]
            c = 4
            for i in s:
                c -= 1

                for j in range(i):
                    print(f'Введите координаты  {c} палубного коробля' if isinstance(player, Human) else '')
                    if player.ask_ship(c) == True:

                        player.board.list_ship.append(player.ship.dots)
                        for add in player.ship.dots[1]:
                            player.board.list_board[add[1] - 1][add[0] - 1] = '■'
                        count += 1


                    else:
                        player.board.list_board = [['O'] * 6 for i in range(6)]
                        player.board.list_ship = []
                        c = 4
                        count = 0
                        break

    def check_win(self):
        checklistai = self.ai.board.live_ship
        checklisthuman = self.human.board.live_ship

        if checklisthuman == 0:

            return True
        elif checklistai == 0:

            return True
        else:
            return False

    def setupship(self):

        self.fill_board(self.ai)
        self.fill_board(self.human)

    def start_shot(self):
            print('Сделайте выстрел!')
            self.human.ask_shot(self.ai.board, self.humanmarks.board)
            print('Противник сделал выстрел!' if self.check_win() != True else '')
            self.ai.ask_shot(self.human.board, self.human.board)

    def gameplay(self):

        self.rules()
        print('Давайте расставим корабли')
        print('Поле ваших кораблей')
        print(self.human.board.draw_board())
        print('Поле противника')
        print(self.humanmarks.board.draw_board())
        self.setupship()
        while True:
            if self.check_win() == True:
                if self.human.board.live_ship == 0:
                    print('Противник одержал победу!')
                else:
                    print('Вы одержали победу')
                break
            else:
                self.start_shot()

games = Game()
games.gameplay()
